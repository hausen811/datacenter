'use strict';
const _ = require('lodash');
const path = require('path');
const fs = require('fs');
const LRU = require('lru-cache');
const { createBundleRenderer } = require('vue-server-renderer');

module.exports = {
  startup: async function vueRenderStartup(app) {
    const isProd = KoaConfig.environment !== 'development'
    const resolve = file => path.resolve(__dirname, file)
    const template = fs.readFileSync(resolve('../../../views/vue/index.template.html'), 'utf-8')

    function createRenderer (bundle, options) {
      // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
      return createBundleRenderer(bundle, Object.assign(options, {
        template,
        // for component caching
        cache: LRU({
          max: 1000,
          maxAge: 1000 * 60 * 15
        }),
        // this is only needed when vue-server-renderer is npm-linked
        basedir: resolve('./dist'),
        // recommended for performance
        runInNewContext: false
      }))
    }
    let renderer
    let readyPromise
    if (isProd) {
      // In production: create server renderer using built server bundle.
      // The server bundle is generated by vue-ssr-webpack-plugin.
      const bundle = require('./dist/vue-ssr-server-bundle.json')
      // The client manifests are optional, but it allows the renderer
      // to automatically infer preload/prefetch links and directly add <script>
      // tags for any async chunks used during render, avoiding waterfall requests.
      const clientManifest = require('./dist/vue-ssr-client-manifest.json')
      renderer = createRenderer(bundle, {
        clientManifest
      })
    } else {
      // In development: setup the dev server with watch and hot-reload,
      // and create a new renderer on bundle / index template update.
      readyPromise = require('../../../build/vueBuild/setup-dev-server')(app, (bundle, options) => {
        renderer = createRenderer(bundle, options)
      })
    }


    function render (context) {
      const cont = {
        title: 'Vue HN 2.0',
        url:context.url
      }
      renderer.renderToString(cont, (err, html) => {
        if (err) {
          console.log(err)
        }
        context.type = "html"
        context.body = html
      })
    }

    app.context.vueRender = isProd ? render : (context) => {
      readyPromise.then(() => render(context))
    };
  }
};